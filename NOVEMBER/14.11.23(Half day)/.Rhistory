to = c(1, 2, 3, 5, 6, 7, 8, 9, 10),
rating = c(2, 3, 4, 6, 8, 7, 9, 5, 3)
)
# Create a tidygraph
graph <- tbl_graph(nodes = nodes, edges = edges)
prices <- c("Tk 1200", "Tk 1250", "Tk 1350", "Tk 1850", "Tk 1650", "Tk 2150", "Tk 1800", "Tk 2500", "Tk 1500", "Tk 1300")
# Add edge_size and layout
E(graph)$edge_size <- edges$rating
layout <- layout_with_kk(graph, weights = E(graph)$edge_size)
# Kamada-Kawai algorithm organizes nodes in a graph match the distances between them.
# Define the desired rating values
desired_ratings <- c("r-2.5", "r-3", "r-4", "r-6", "r-8", "r-7", "r-9", "r-5.5", "r-3")
# Reduce the overall size of the plot
small_screen_plot <- ggraph(graph, layout = layout) +
geom_edge_link(aes(color = "darkorange"), show.legend = FALSE,
start_cap = circle(2, "mm"), end_cap = circle(2, "mm")) +
geom_edgelabel(aes(label = desired_ratings, color = "darkorange"),
vjust = 0.6, hjust = -0.7, size = 3, check_overlap = TRUE) +
geom_node_point(aes(color = as.factor(id)), size = 5) +
geom_node_text(aes(label = str_wrap(label, width = 8)), vjust = 0.2, hjust = 0.5, size = 2) +
geom_node_text(aes(label = prices), vjust = 1.5, hjust = 0.5, size = 2, color = "black") +
theme_void() +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),
legend.position = "none"
)
library(tidygraph)
library(igraph)
library(ggraph)
library(tibble)
library(stringr)
# Create nodes
nodes <- tibble(id = 1:10, label = c("Hotel A bla  bla bla", "Hotel B bla  bla bla", "Hotel C bla  bla bla", "Hotel D bla  bla bla", "Hotel E bla  bla bla", "Hotel F bla  bla bla", "Hotel G bla  bla bla", "Hotel H bla  bla bla", "Hotel I bla  bla bla", "Hotel J bla  bla bla"))
# Specify edges
edges <- tibble(
from = c(4, 4, 4, 4, 4, 4, 4, 4, 4),
to = c(1, 2, 3, 5, 6, 7, 8, 9, 10),
rating = c(2, 3, 4, 6, 8, 7, 9, 5, 3)
)
# Create a tidygraph
graph <- tbl_graph(nodes = nodes, edges = edges)
prices <- c("Tk 1200", "Tk 1250", "Tk 1350", "Tk 1850", "Tk 1650", "Tk 2150", "Tk 1800", "Tk 2500", "Tk 1500", "Tk 1300")
# Add edge_size and layout
E(graph)$edge_size <- edges$rating
layout <- layout_with_kk(graph, weights = E(graph)$edge_size)
# Define the desired rating values
desired_ratings <- c("r-2.5", "r-3", "r-4", "r-6", "r-8", "r-7", "r-9", "r-5.5", "r-3")
# Create a smaller screen plot with clear edge labels
small_screen_plot <- ggraph(graph, layout = layout) +
geom_edge_link(aes(label = desired_ratings, vjust = 0.6, hjust = -0.7, color = "darkorange"),
show.legend = FALSE,
start_cap = circle(2, "mm"),  # Reduce the size of start_cap
end_cap = circle(2, "mm"),    # Reduce the size of end_cap
arrow = arrow(length = unit(0.1, "inches"), type = "closed")) +  # Add arrow to edges
geom_node_point(aes(color = as.factor(id)), size = 5) +  # Reduce the size of node points
geom_node_text(aes(label = str_wrap(label, width = 8)), vjust = 0.2, hjust = 0.5, size = 2) +  # Adjust text wrapping
geom_node_text(aes(label = prices), vjust = -1, hjust = 0.5, size = 2, color = "black") +  # Adjust the position and size of price labels
theme_void() +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),  # Reduce the margin
legend.position = "none"
)
print(small_screen_plot)
library(tidygraph)
library(igraph)
library(ggraph)
library(tibble)
library(stringr)
# Create nodes
nodes <- tibble(id = 1:10, label = c("Hotel A bla  bla bla", "Hotel B bla  bla bla", "Hotel C bla  bla bla", "Hotel D bla  bla bla", "Hotel E bla  bla bla", "Hotel F bla  bla bla", "Hotel G bla  bla bla", "Hotel H bla  bla bla", "Hotel I bla  bla bla", "Hotel J bla  bla bla"))
# Specify edges
edges <- tibble(
from = c(4, 4, 4, 4, 4, 4, 4, 4, 4),
to = c(1, 2, 3, 5, 6, 7, 8, 9, 10),
rating = c(2, 3, 4, 6, 8, 7, 9, 5, 3)
)
# Create a tidygraph
graph <- tbl_graph(nodes = nodes, edges = edges)
prices <- c("Tk 1200", "Tk 1250", "Tk 1350", "Tk 1850", "Tk 1650", "Tk 2150", "Tk 1800", "Tk 2500", "Tk 1500", "Tk 1300")
# Add edge_size and layout
E(graph)$edge_size <- edges$rating
layout <- layout_with_kk(graph, weights = E(graph)$edge_size)
# Define the desired rating values
desired_ratings <- c("r-2.5", "r-3", "r-4", "r-6", "r-8", "r-7", "r-9", "r-5.5", "r-3")
# Create a smaller screen plot with clear edge labels
small_screen_plot <- ggraph(graph, layout = layout) +
geom_edge_link(aes(label = desired_ratings, vjust = 0.6, hjust = -0.7, color = "darkorange"),
show.legend = FALSE,
start_cap = circle(2, "mm"),  # Reduce the size of start_cap
end_cap = circle(2, "mm"),    # Reduce the size of end_cap
arrow = arrow(length = unit(0.1, "inches"), type = "closed")) +  # Add arrow to edges
geom_node_point(aes(color = as.factor(id)), size = 5) +  # Reduce the size of node points
geom_node_text(aes(label = str_wrap(label, width = 8)), vjust = 0.2, hjust = 0.5, size = 2) +  # Adjust text wrapping
geom_node_text(aes(label = prices), vjust = -1, hjust = 0.5, size = 2, color = "black") +  # Adjust the position and size of price labels
theme_void() +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),  # Reduce the margin
legend.position = "none"
)
print(small_screen_plot)
library(tidygraph)
library(igraph)
library(ggraph)
library(tibble)
library(stringr)
# Create nodes
nodes <- tibble(id = 1:10, label = c("Hotel A bla  bla bla", "Hotel B bla  bla bla", "Hotel C bla  bla bla", "Hotel D bla  bla bla", "Hotel E bla  bla bla", "Hotel F bla  bla bla", "Hotel G bla  bla bla", "Hotel H bla  bla bla", "Hotel I bla  bla bla", "Hotel J bla  bla bla"))
# Specify edges
edges <- tibble(
from = c(4, 4, 4, 4, 4, 4, 4, 4, 4),
to = c(1, 2, 3, 5, 6, 7, 8, 9, 10),
rating = c(2, 3, 4, 6, 8, 7, 9, 5, 3)
)
# Create a tidygraph
graph <- tbl_graph(nodes = nodes, edges = edges)
prices <- c("Tk 1200", "Tk 1250", "Tk 1350", "Tk 1850", "Tk 1650", "Tk 2150", "Tk 1800", "Tk 2500", "Tk 1500", "Tk 1300")
# Add edge_size and layout
E(graph)$edge_size <- edges$rating
layout <- layout_with_kk(graph, weights = E(graph)$edge_size)
# Define the desired rating values
desired_ratings <- c("r-2.5", "r-3", "r-4", "r-6", "r-8", "r-7", "r-9", "r-5.5", "r-3")
# Create a smaller screen plot with clear edge labels
small_screen_plot <- ggraph(graph, layout = layout) +
geom_edge_link(aes(label = desired_ratings, vjust = 0.6, hjust = -0.7, color = "darkorange"),
show.legend = FALSE,
start_cap = circle(2, "mm"),  # Reduce the size of start_cap
end_cap = circle(2, "mm"),    # Reduce the size of end_cap
arrow = arrow(length = unit(0.1, "inches"), type = "closed")) +  # Add arrow to edges
geom_node_point(aes(color = as.factor(id)), size = 5) +  # Reduce the size of node points
geom_node_text(aes(label = str_wrap(label, width = 8)), vjust = 0.2, hjust = 0.5, size = 2) +  # Adjust text wrapping
geom_node_text(aes(label = prices), vjust = -1, hjust = 0.5, size = 2, color = "black") +  # Adjust the position and size of price labels
theme_void() +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),  # Reduce the margin
legend.position = "none"
)
print(small_screen_plot)
library(tidygraph)
library(igraph)
library(ggraph)
library(tibble)
library(stringr)
# Create nodes
nodes <- tibble(id = 1:10, label = c("Hotel A bla  bla bla", "Hotel B bla  bla bla", "Hotel C bla  bla bla", "Hotel D bla  bla bla", "Hotel E bla  bla bla", "Hotel F bla  bla bla", "Hotel G bla  bla bla", "Hotel H bla  bla bla", "Hotel I bla  bla bla", "Hotel J bla  bla bla"))
# Specify edges
edges <- tibble(
from = c(4, 4, 4, 4, 4, 4, 4, 4, 4),
to = c(1, 2, 3, 5, 6, 7, 8, 9, 10),
rating = c(2, 3, 4, 6, 8, 7, 9, 5, 3)
)
# Create a tidygraph
graph <- tbl_graph(nodes = nodes, edges = edges)
prices <- c("Tk 1200", "Tk 1250", "Tk 1350", "Tk 1850", "Tk 1650", "Tk 2150", "Tk 1800", "Tk 2500", "Tk 1500", "Tk 1300")
# Add edge_size and layout
E(graph)$edge_size <- edges$rating
layout <- layout_with_kk(graph, weights = E(graph)$edge_size)
# Define the desired rating values
desired_ratings <- c("r-2.5", "r-3", "r-4", "r-6", "r-8", "r-7", "r-9", "r-5.5", "r-3")
# Create a smaller screen plot with clear edge labels
small_screen_plot <- ggraph(graph, layout = layout) +
geom_edge_link(aes(label = desired_ratings, vjust = 0.6, hjust = -0.7, color = "darkorange"),
show.legend = FALSE,
start_cap = circle(2, "mm"),  # Reduce the size of start_cap
end_cap = circle(2, "mm"),    # Reduce the size of end_cap
arrow = arrow(length = unit(0.1, "inches"), type = "closed")) +  # Add arrow to edges
geom_node_point(aes(color = as.factor(id)), size = 5) +  # Reduce the size of node points
geom_node_text(aes(label = str_wrap(label, width = 8)), vjust = 0.2, hjust = 0.5, size = 2) +  # Adjust text wrapping
geom_node_text(aes(label = prices), vjust = -1, hjust = 0.5, size = 2, color = "black") +  # Adjust the position and size of price labels
theme_void() +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),  # Reduce the margin
legend.position = "none"
)
print(small_screen_plot)
library(tidygraph)
library(igraph)
library(ggraph)
library(tibble)
library(stringr)
# Create nodes
nodes <- tibble(id = 1:10, label = c("Hotel A bla  bla bla", "Hotel B bla  bla bla", "Hotel C bla  bla bla", "Hotel D bla  bla bla", "Hotel E bla  bla bla", "Hotel F bla  bla bla", "Hotel G bla  bla bla", "Hotel H bla  bla bla", "Hotel I bla  bla bla", "Hotel J bla  bla bla"))
# Specify edges
edges <- tibble(
from = c(4, 4, 4, 4, 4, 4, 4, 4, 4),
to = c(1, 2, 3, 5, 6, 7, 8, 9, 10),
rating = c(2, 3, 4, 6, 8, 7, 9, 5, 3)
)
# Create a tidygraph
graph <- tbl_graph(nodes = nodes, edges = edges)
prices <- c("Tk 1200", "Tk 1250", "Tk 1350", "Tk 1850", "Tk 1650", "Tk 2150", "Tk 1800", "Tk 2500", "Tk 1500", "Tk 1300")
# Add edge_size and layout
E(graph)$edge_size <- edges$rating
layout <- layout_with_kk(graph, weights = E(graph)$edge_size)
# Define the desired rating values
desired_ratings <- c("r-2.5", "r-3", "r-4", "r-6", "r-8", "r-7", "r-9", "r-5.5", "r-3")
# Create a smaller screen plot with clear edge labels
small_screen_plot <- ggraph(graph, layout = layout) +
geom_edge_link(aes(label = desired_ratings, vjust = 0.6, hjust = -0.7, color = "darkorange"),
show.legend = FALSE,
start_cap = circle(2, "mm"),  # Reduce the size of start_cap
end_cap = circle(2, "mm"),    # Reduce the size of end_cap
arrow = arrow(length = unit(0.1, "inches"), type = "closed")) +  # Add arrow to edges
geom_node_point(aes(color = as.factor(id)), size = 5) +  # Reduce the size of node points
geom_node_text(aes(label = str_wrap(label, width = 8)), vjust = 0.2, hjust = 0.5, size = 2) +  # Adjust text wrapping
geom_node_text(aes(label = prices), vjust = -1, hjust = 0.5, size = 2, color = "black") +  # Adjust the position and size of price labels
theme_void() +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),  # Reduce the margin
legend.position = "none"
)
print(small_screen_plot)
library(shiny); runApp('E:/WORK/NOVEMBER/15.11.23(hotel graph)/Normal shiny app.R')
runApp('E:/WORK/NOVEMBER/15.11.23(hotel graph)/Small screen shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/all screnn shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/try for responsive.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/try nodes label to responsive.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/try for responsive.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/try for responsive.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/home try.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/home try.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/home try.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/home try.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/home try-2.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/home try-2.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/home try-2.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/all screnn shiny app.R')
library(tidygraph)
library(igraph)
library(ggraph)
library(tibble)
library(stringr)
library(ggplot2)
# Create nodes
nodes <- tibble(id = 1:10, label = c("Hotel A bla  bla bla", "Hotel B bla  bla bla", "Hotel C bla  bla bla", "Hotel D bla  bla bla", "Hotel E bla  bla bla", "Hotel F bla  bla bla", "Hotel G bla  bla bla", "Hotel H bla  bla bla", "Hotel I bla  bla bla", "Hotel J bla  bla bla"))
# Specify edges
edges <- tibble(
from = c(4, 4, 4, 4, 4, 4, 4, 4, 4),
to = c(1, 2, 3, 5, 6, 7, 8, 9, 10),
rating = c(2, 3, 4, 6, 8, 7, 9, 5, 3)  # Use 'rating' instead of 'label'
)
# Create a tidygraph
graph <- tbl_graph(nodes = nodes, edges = edges)
prices <- c("Tk 1200", "Tk 1250", "Tk 1350", "Tk 1850", "Tk 1650", "Tk 2150", "Tk 1800", "Tk 2500", "Tk 1500", "Tk 1300")
# Add edge_size and layout
E(graph)$edge_size <- edges$rating
layout <- layout_with_kk(graph, weights = E(graph)$edge_size)
# Kamada-Kawai algorithm organizes nodes in a graph match the distances between them.
# Define the desired rating values
desired_ratings <- c("r-2.5", "r-3", "r-4", "r-6", "r-8", "r-7", "r-9", "r-5.5", "r-3")
# Specify the desired width and height for the plot in inches
plot_width <- 10
plot_height <- 6
# Save the plot as a PNG file with the specified dimensions
g <- ggraph(graph, layout = layout) +
geom_edge_link(aes(label = desired_ratings, vjust = 0.6, hjust = -0.7, color = "darkorange"),
show.legend = FALSE,
start_cap = circle(5, "mm"),
end_cap = circle(5, "mm")) +
geom_node_point(aes(color = as.factor(id)), size = 20) +
geom_node_text(aes(label = str_wrap(label, width = 12)), vjust = 0.2, hjust = 0.5, size = 2.5) +
geom_node_text(aes(label = prices), vjust = 2, hjust = 0.5, size = 3, color = "black") +
theme_void() +
theme(
plot.margin = margin(1, 1, 1, 1, "cm"),
legend.position = "none"
)
ggsave("responsive_plot.png", g, width = plot_width, height = plot_height, units = "in", dpi = 300)
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/home try-2.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/home try.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/try for responsive.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/try for responsive.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/all screnn shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/try nodes label to responsive.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/try for responsive.R')
runApp('E:/WORK/NOVEMBER/16.11.23(fix graph problem)/desired rating shiny app.R')
library(shiny); runApp('E:/WORK/NOVEMBER/19.11.23(Last for Graph)/phone full plot.R')
runApp('E:/WORK/NOVEMBER/19.11.23(Last for Graph)/phone full plot.R')
# Load necessary libraries
library(ggraph)
library(tidygraph)
library(tidyverse)
# Create nodes
nodes <- tibble(
id = 1:10,
class = sample(letters[1:10], 10, replace = FALSE),
name = c("Alice", "Bob", "Charlie", "David", "Eva", "Frank", "Grace", "Henry", "Ivy", "Jack")
)
# Specify connections
connections <- data.frame(
from = c("Alice", "Charlie", "Eva", "Bob", "David"),
to = c("Grace", "Ivy", "Frank", "Henry", "Jack")
)
# Find corresponding IDs for connections
connection_ids <- nodes %>%
filter(name %in% c(connections$from, connections$to)) %>%
pull(id)
# Create edges for the specified connections
edges <- tibble(from = rep(connection_ids[1:5], each = 2), to = rep(connection_ids[6:10], times = 2))
# Create the graph
graph <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
# Visualize the graph with arrows
ggraph(graph, layout = "stress") +
geom_edge_link(arrow = arrow(),
start_cap = circle(5, "mm"),
end_cap = circle(5, "mm")) +
geom_node_point(aes(colour = class), size = 10) +
geom_node_text(aes(label = name), vjust = 0.5, hjust = 0.5)
# Load necessary libraries
library(ggraph)
library(tidygraph)
library(tidyverse)
# Create nodes
nodes <- tibble(
id = 1:10,
class = sample(letters[1:10], 10, replace = FALSE),
name = c("Alice", "Bob", "Charlie", "David", "Eva", "Frank", "Grace", "Henry", "Ivy", "Jack")
)
# Specify connections
connections <- data.frame(
from = c("Alice", "Charlie", "Eva", "Bob", "David"),
to = c("Grace", "Ivy", "Frank", "Henry", "Jack")
)
# Find corresponding IDs for connections
connection_ids <- nodes %>%
filter(name %in% c(connections$from, connections$to)) %>%
pull(id)
# Create edges for the specified connections
edges <- tibble(from = rep(connection_ids[1:5], each = 2), to = rep(connection_ids[6:10], times = 2))
# Create the graph
graph <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
# Visualize the graph with arrows
ggraph(graph, layout = "stress") +
geom_edge_link(arrow = arrow(),
start_cap = circle(5, "mm"),
end_cap = circle(5, "mm")) +
geom_node_point(aes(colour = class), size = 10) +
geom_node_text(aes(label = name), vjust = 0.5, hjust = 0.5)
# Load necessary libraries
library(ggraph)
library(tidygraph)
library(tidyverse)
# Create nodes
nodes <- tibble(
id = 1:10,
class = sample(letters[1:10], 10, replace = FALSE),
name = c("Hotel A", "Hotel B", "Hotel C", "Hotel D", "Hotel E", "Hotel F", "Hotel G", "Hotel G", "Hotel H", "Hotel I", "Hotel J")
)
# Load necessary libraries
library(ggraph)
library(tidygraph)
library(tidyverse)
# Create nodes with fixed names and class letters
nodes <- tibble(
id = 1:10,
class = sample(letters[1:10], 10, replace = FALSE),
name = c("Alice", "Bob", "Charlie", "David", "Eva", "Frank", "Grace", "Henry", "Ivy", "Jack"),
direction = c("out", "in", "out", "in", "out", "in", "out", "in", "out", "in")
)
# Ensure there are enough unique node pairs for edges without replacement
if (nrow(nodes) < 2) stop("Not enough nodes for edges without replacement")
# Create edges without replacement
edges <- crossing(from = 1:10, to = 1:10) %>%
filter(from != to) %>%
sample_n(15)
# Find all combinations of node pairs
all_node_combinations <- combn(nodes$id, 2, simplify = TRUE)
# Create edges for all combinations
new_edges <- tibble(from = all_node_combinations[1, ], to = all_node_combinations[2, ])
# Add the new edges to the existing edges dataframe
edges <- bind_rows(edges, new_edges)
# Create the graph with the updated edges
graph <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)
# Visualize the updated graph
ggraph(graph, layout = "stress") +
geom_edge_link(
arrow = arrow(type = ifelse(nodes$direction == "out", "closed", "closed")),
start_cap = circle(5, "mm"),
end_cap = circle(5, "mm")
) +
geom_node_point(aes(colour = class), size = 10) +
geom_node_text(aes(label = name), vjust = 0.5, hjust = 0.5)
# Install and load required packages
if (!requireNamespace("network", quietly = TRUE)) {
install.packages("network")
}
if (!requireNamespace("networkD3", quietly = TRUE)) {
install.packages("networkD3")
}
# Load the packages
library(network)
library(networkD3)
# Create the bipartite network
bip <- network(data.frame(event1 = c(1, 2, 1, 0),
event2 = c(0, 0, 3, 0),
event3 = c(1, 1, 0, 4),
row.names = letters[1:4]),
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
library(tidygraph)
library(igraph)
#In the given code, igraph is used to create a graph (tbl_graph), set up edges and vertices
library(ggraph)
#ggraph is a powerful and flexible tool for creating aesthetically pleasing and customizable graph visualizations in R, especially when working with graphs generated using the igraph package.
library(tibble)
# Create nodes
nodes <- tibble(id = 1:10, label = c("Hotel A", "Hotel B", "Hotel C", "Hotel D", "Hotel E", "Hotel F", "Hotel G", "Hotel H", "Hotel I", "Hotel J"))
# Specify edges
edges <- tibble(
from = c(4, 4, 4, 4, 4, 4, 4, 4, 4),
to = c(1, 2, 3, 5, 6, 7, 8, 9, 10),
label = c(2, 3, 4, 6, 8, 7, 9, 5, 3)  # Add labels for each edge
)
# Create a tidygraph
graph <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
prices <- c("Tk 2000", "Tk 1800", "Tk 1700", "Tk 1400", "Tk 1300", "Tk 1900", "Tk 1350", "Tk 1650", "Tk 1350", "Tk 1650")
# Add edge_size and layout
E(graph)$edge_size <- c(2, 3, 4, 6, 8, 7, 9, 5, 3)
layout <- layout_with_kk(graph, weights = E(graph)$edge_size)
# Plot the graph
ggraph(graph, layout = layout) +
geom_edge_link(aes(label = label),
arrow = arrow(),
start_cap = circle(5, "mm"),
end_cap = circle(5, "mm")) +
geom_node_point(aes(color = as.factor(id)), size = 15) +
geom_node_text(aes(label = label), vjust = 0.5, hjust = 0.5, size = 3) +
geom_node_text(aes(label = prices), vjust = -3, hjust = 1, size = 3, color="darkblue") +
theme_void() +
scale_color_discrete(name = "Hotels", labels = c("Hotel A", "Hotel B", "Hotel C", "Hotel D", "Hotel E", "Hotel F", "Hotel G", "Hotel H", "Hotel I", "Hotel J")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm")
)
library(tidygraph)
library(igraph)
#In the given code, igraph is used to create a graph (tbl_graph), set up edges and vertices
library(ggraph)
#ggraph is a powerful and flexible tool for creating aesthetically pleasing and customizable graph visualizations in R, especially when working with graphs generated using the igraph package.
library(tibble)
# Create nodes
nodes <- tibble(id = 1:10, label = c("Hotel A", "Hotel B", "Hotel C", "Hotel D", "Hotel E", "Hotel F", "Hotel G", "Hotel H", "Hotel I", "Hotel J"))
# Specify edges
edges <- tibble(
from = c(4, 4, 4, 4, 4, 4, 4, 4, 4),
to = c(1, 2, 3, 5, 6, 7, 8, 9, 10),
label = c("r-2", "r-3", "r-4", "r-6", "r-8", "r-7", "r-9", "r-5", "r-3")  # Add labels for each edge
)
# Create a tidygraph
graph <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
prices <- c("Tk 2000", "Tk 1800", "Tk 1700", "Tk 1400", "Tk 1300", "Tk 1900", "Tk 1350", "Tk 1650", "Tk 1350", "Tk 1650")
# Add edge_size and layout
E(graph)$edge_size <- c(2, 3, 4, 6, 8, 7, 9, 5, 3)
layout <- layout_with_kk(graph, weights = E(graph)$edge_size)
# Plot the graph
ggraph(graph, layout = layout) +
geom_edge_link(aes(label = label, vjust = -1.2,hjust = -0.1, color="darkorange"),
start_cap = circle(5, "mm"),
end_cap = circle(5, "mm")) +
geom_node_point(aes(color = as.factor(id)), size = 15) +
geom_node_text(aes(label = label), vjust = 0.5, hjust = 0.5, size = 3) +
geom_node_text(aes(label = prices), vjust = -3, hjust = 1, size = 4, color="darkblue") +
theme_void() +
scale_color_discrete(name = "Hotels", labels = c("Hotel A", "Hotel B", "Hotel C", "Hotel D", "Hotel E", "Hotel F", "Hotel G", "Hotel H", "Hotel I", "Hotel J")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm")
)
library(tidygraph)
library(igraph)
#In the given code, igraph is used to create a graph (tbl_graph), set up edges and vertices
library(ggraph)
#ggraph is a powerful and flexible tool for creating aesthetically pleasing and customizable graph visualizations in R, especially when working with graphs generated using the igraph package.
library(tibble)
# Create nodes
nodes <- tibble(id = 1:10, label = c("Hotel A", "Hotel B", "Hotel C", "Hotel D", "Hotel E", "Hotel F", "Hotel G", "Hotel H", "Hotel I", "Hotel J"))
# Specify edges
edges <- tibble(
from = c(4, 4, 4, 4, 4, 4, 4, 4, 4),
to = c(1, 2, 3, 5, 6, 7, 8, 9, 10),
label = c("r-2", "r-3", "r-4", "r-6", "r-8", "r-7", "r-9", "r-5", "r-3")  # Add labels for each edge
)
# Create a tidygraph
graph <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
prices <- c("Tk 2000", "Tk 1800", "Tk 1700", "Tk 1400", "Tk 1300", "Tk 1900", "Tk 1350", "Tk 1650", "Tk 1350", "Tk 1650")
# Add edge_size and layout
E(graph)$edge_size <- c(2, 3, 4, 6, 8, 7, 9, 5, 3)
layout <- layout_with_kk(graph, weights = E(graph)$edge_size)
# Plot the graph
ggraph(graph, layout = layout) +
geom_edge_link(aes(label = label, vjust = 0.6,hjust = -0.7, color="darkorange"),
start_cap = circle(5, "mm"),
end_cap = circle(5, "mm")) +
geom_node_point(aes(color = as.factor(id)), size = 19) +
geom_node_text(aes(label = label), vjust = 0.5, hjust = 0.5, size = 3) +
geom_node_text(aes(label = prices), vjust = 2, hjust = 0.5, size = 3, color="black") +
theme_void() +
scale_color_discrete(name = "Hotels", labels = c("Hotel A", "Hotel B", "Hotel C", "Hotel D", "Hotel E", "Hotel F", "Hotel G", "Hotel H", "Hotel I", "Hotel J")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm")
)
runApp('E:/WORK/NOVEMBER/19.11.23(Last for Graph)/phone full plot.R')
